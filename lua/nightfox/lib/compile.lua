local config = require("nightfox.config").options
local util = require("nightfox.util")
local parse_styles = require("nightfox.lib.highlight").parse_style

local fmt = string.format

local header = [[
-- This file is autogenerated by NIGHTFOX.
-- Do not make changes directly to this file.
]]

local cmd_compat_block = [[
local cmd = vim.fn.has("nvim") == 0 and vim.command or vim.cmd
]]

local clear_block = [[
if vim.g.colors_name then
  cmd("hi clear")
end
]]

local function inspect(t)
  local list = {}
  for k, v in pairs(t) do
    local q = type(v) == "string" and [["]] or ""
    table.insert(list, fmt([[%s = %s%s%s]], k, q, v, q))
  end

  table.sort(list)
  return fmt([[{ %s }]], table.concat(list, ", "))
end

local function should_link(link)
  return link and link ~= ""
end

local function gen_nvim_highlight_block(lines, spec)
  local list = {}
  local groups = require("nightfox.group").from(spec)
  local normal = nil
  for name, values in pairs(groups) do
    -- HACK: This is because of the current issue with `nvim_set_hl` and Normal highlight.
    -- Saving it to be called with :highlight as hacky workaround.
    if name == "Normal" then
      normal = values
    end
    if should_link(values.link) then
      table.insert(list, fmt([[vim.api.nvim_set_hl(0, "%s", { link = "%s" })]], name, values.link))
    else
      local opts = parse_styles(values.style)
      opts.bg = values.bg
      opts.fg = values.fg
      opts.sp = values.sp
      table.insert(list, fmt([[vim.api.nvim_set_hl(0, "%s", %s)]], name, inspect(opts)))
    end
  end

  table.sort(list)
  table.insert(lines, table.concat(list, "\n"))
  table.insert(lines, "")

  -- Not sure why we would not have found this but... hack away!!!!!!
  if normal then
    table.insert(lines, [[-- This is a hack as currently `nvim_set_hl` returns `{ [true] = 6 }`]])
    table.insert(lines, [[-- if `Normal` is requested from `nvim_get_hl_by_name("Normal", true)`]])
    if should_link(normal.link) then
      table.insert(lines, fmt([[vim.cmd("highlight! link Normal %s")]], name, normal.link))
    else
      table.insert(
        lines,
        fmt(
          [[vim.cmd("highlight Normal guifg=%s guibg=%s gui=%s guisp=%s")]],
          normal.fg or "NONE",
          normal.bg or "NONE",
          normal.style or "NONE",
          normal.sp or "NONE"
        )
      )
    end
    table.insert(lines, "")
  end
end

local function gen_viml_highlight_block(lines, spec)
  local list = {}
  local groups = require("nightfox.group").from(spec)
  for name, values in pairs(groups) do
    if should_link(values.link) then
      table.insert(list, fmt([[highlight! link %s %s]], name, values.link))
    else
      table.insert(
        list,
        fmt(
          [[highlight %s guifg=%s guibg=%s gui=%s guisp=%s]],
          name,
          values.fg or "NONE",
          values.bg or "NONE",
          values.style or "NONE",
          values.sp or "NONE"
        )
      )
    end
  end

  table.sort(list)
  table.insert(lines, "cmd([[")
  table.insert(lines, table.concat(list, " |\n"))
  table.insert(lines, "]])")
  table.insert(lines, "")
end

local function gen_set_info_block(meta)
  local lines = {}

  local background = meta.light and "light" or "dark"
  table.insert(lines, [[cmd("set termguicolors")]])
  table.insert(lines, fmt([[cmd("set background=%s")]], background))
  table.insert(lines, fmt([[vim.g.colors_name = "%s"]], meta.name))
  table.insert(lines, "")

  return table.concat(lines, "\n")
end

local function gen_terminal_func(spec)
  local c = spec.palette

  local lines = {}

  -- stylua: ignore
  local colors = {
    fmt([["%s"]], c.black.base),   fmt([["%s"]], c.red.base),
    fmt([["%s"]], c.green.base),   fmt([["%s"]], c.yellow.base),
    fmt([["%s"]], c.blue.base),    fmt([["%s"]], c.magenta.base),
    fmt([["%s"]], c.cyan.base),    fmt([["%s"]], c.white.base),
    fmt([["%s"]], c.black.bright), fmt([["%s"]], c.red.bright),
    fmt([["%s"]], c.green.bright), fmt([["%s"]], c.yellow.bright),
    fmt([["%s"]], c.blue.bright),  fmt([["%s"]], c.magenta.bright),
    fmt([["%s"]], c.cyan.bright),  fmt([["%s"]], c.white.bright),
  }

  table.insert(lines, "local function set_terminal()")
  table.insert(lines, "   -- stylua: ignore")
  table.insert(lines, "  local colors = {")
  table.insert(lines, fmt("    %s,", table.concat(colors, ", ")))
  table.insert(lines, "  }")

  -- stylua: ignore
  table.insert(lines, [[
  for i, c in ipairs(colors) do
    local n = "terminal_color_" .. i - 1
    vim.g[n] = c
  end
  if vim.fn.has("nvim") == 0 then
    vim.g.terminal_ansi_colors = vim.list(colors)
  end
end

set_terminal()
]])

  return table.concat(lines, "\n")
end

local M = {}

function M.compile(opts)
  opts = opts or {}
  local output_path = opts.compile_path or config.compile_path
  local file_suffix = opts.file_suffix or config.compile_file_suffix

  util.ensure_dir(output_path)

  local compile_nvim_api = util.use_nvim_api
  if opts["nvim_api"] ~= nil then
    compile_nvim_api = opts.nvim_api
  end

  local specs = require("nightfox.spec").load()

  for specname, spec in pairs(specs) do
    local lines = {}

    table.insert(lines, header)
    table.insert(lines, cmd_compat_block)
    table.insert(lines, clear_block)

    -- NOTE: There is an issue with `nvim_set_hl` where if `set background=dark` is called after it clears some of the
    -- highlights like comments calling it before solves the issue.
    table.insert(lines, gen_set_info_block(spec.palette.meta))

    if compile_nvim_api then
      gen_nvim_highlight_block(lines, spec)
    else
      gen_viml_highlight_block(lines, spec)
    end

    if config.terminal_colors then
      table.insert(lines, gen_terminal_func(spec))
    end

    local output_file = util.join_paths(output_path, specname .. file_suffix .. ".lua")
    local file = io.open(output_file, "w")
    file:write(table.concat(lines, "\n"))
    file:close()
  end
end

function M.clean()
  local foxes = require("nightfox.palette").foxes

  local output_path = config.compile_path
  local file_suffix = config.compile_file_suffix

  for _, name in ipairs(foxes) do
    local output_file = util.join_paths(output_path, name .. file_suffix .. ".lua")
    os.remove(output_file)
  end
end

function M.status()
  local foxes = require("nightfox.palette").foxes

  local output_path = config.compile_path
  local file_suffix = config.compile_file_suffix

  for _, name in ipairs(foxes) do
    local file = util.join_paths(output_path, name .. file_suffix .. ".lua")
    local status = util.exists(file) and "âœ“" or "x"
    print(fmt("[%s]: %-10s %s", status, name, file))
  end
end

return M
